{"ast":null,"code":"import { GET_COUNTRIES, GET_COUNTRY_DETAIL, GET_COUNTRY_BY_NAME, GET_ACTIVITIES, ADD_ACTIVITY, CHANGE_PAGE, ORDER_COUNTRIES, FILTER_BY_CONTINENT, FILTER_BY_ACTIVITY } from \"./actions-types\";\nconst initialState = {\n  countries: [],\n  countriesContinents: [],\n  countriesActivities: [],\n  countryDetail: {},\n  activities: [],\n  newActivity: \"\",\n  page: 1\n};\nconst reducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let {\n    type,\n    payload\n  } = arguments.length > 1 ? arguments[1] : undefined;\n  switch (type) {\n    case GET_COUNTRIES:\n      return {\n        ...state,\n        countries: payload,\n        countriesContinents: payload,\n        countriesActivities: payload\n      };\n    case GET_COUNTRY_DETAIL:\n      return {\n        ...state,\n        countryDetail: payload\n      };\n    case GET_COUNTRY_BY_NAME:\n      return {\n        ...state,\n        countries: payload\n      };\n    case GET_ACTIVITIES:\n      return {\n        ...state,\n        activities: payload\n      };\n    case ADD_ACTIVITY:\n      return {\n        ...state,\n        NewActivity: payload\n      };\n    case CHANGE_PAGE:\n      return {\n        ...state,\n        page: payload\n      };\n    case ORDER_COUNTRIES:\n      const {\n        orderOption\n      } = payload;\n      let orderCountries;\n      if (orderOption === 'name_asc') {\n        orderCountries = [...state.countries].sort((a, b) => a.name.localeCompare(b.name));\n      } else if (orderOption === 'name_desc') {\n        orderCountries = [...state.countries].sort((a, b) => b.name.localeCompare(a.name));\n      } else if (orderOption === 'population_asc') {\n        orderCountries = [...state.countries].sort((a, b) => a.population - b.population);\n      } else if (orderOption === 'population_desc') {\n        orderCountries = [...state.countries].sort((a, b) => b.population - a.population);\n      } else {\n        orderCountries = [...state.countries];\n      }\n      return {\n        ...state,\n        countries: orderCountries\n      };\n    case FILTER_BY_CONTINENT:\n      const continent = payload;\n      const allCountriesFiltered = state.countriesContinents;\n      const filterByContinent = continent === 'all' ? allCountriesFiltered : allCountriesFiltered.filter(country => country.region === continent);\n      return {\n        ...state,\n        countries: filterByContinent\n      };\n    case FILTER_BY_ACTIVITY:\n      const activity = payload;\n      const countriesFiltered = state.countriesActivities;\n      const filterCountries = activity === 'all' ? countriesFiltered : countriesFiltered.filter(country => country.Activities.length && country.Activities.some(act => act.id === Number(activity)));\n      return {\n        ...state,\n        countries: filterCountries\n      };\n    default:\n      return {\n        ...state\n      };\n  }\n  ;\n};\nexport default reducer;","map":{"version":3,"names":["GET_COUNTRIES","GET_COUNTRY_DETAIL","GET_COUNTRY_BY_NAME","GET_ACTIVITIES","ADD_ACTIVITY","CHANGE_PAGE","ORDER_COUNTRIES","FILTER_BY_CONTINENT","FILTER_BY_ACTIVITY","initialState","countries","countriesContinents","countriesActivities","countryDetail","activities","newActivity","page","reducer","state","arguments","length","undefined","type","payload","NewActivity","orderOption","orderCountries","sort","a","b","name","localeCompare","population","continent","allCountriesFiltered","filterByContinent","filter","country","region","activity","countriesFiltered","filterCountries","Activities","some","act","id","Number"],"sources":["C:/Users/valen/OneDrive/Escritorio/Deploy/client/src/Redux/reducer.js"],"sourcesContent":["import { GET_COUNTRIES, GET_COUNTRY_DETAIL, GET_COUNTRY_BY_NAME, GET_ACTIVITIES, ADD_ACTIVITY, CHANGE_PAGE, ORDER_COUNTRIES, FILTER_BY_CONTINENT, FILTER_BY_ACTIVITY } from \"./actions-types\";\r\n\r\nconst initialState = {\r\n    countries: [],\r\n    countriesContinents:[],\r\n    countriesActivities: [],\r\n    countryDetail: {},\r\n    activities: [],\r\n    newActivity: \"\",\r\n    page: 1,\r\n};\r\n\r\nconst reducer = (state = initialState, { type, payload }) => {\r\n    switch(type){\r\n        case GET_COUNTRIES:\r\n            return{\r\n                ...state,\r\n                countries: payload,\r\n                countriesContinents: payload,\r\n                countriesActivities: payload\r\n            }\r\n        case GET_COUNTRY_DETAIL:\r\n            return{\r\n                ...state,\r\n                countryDetail: payload\r\n            }\r\n        case GET_COUNTRY_BY_NAME:\r\n            return{\r\n                ...state,\r\n                countries: payload\r\n            }\r\n        case GET_ACTIVITIES:\r\n            return{\r\n                ...state,\r\n                activities: payload  \r\n            }\r\n        case ADD_ACTIVITY:\r\n            return{\r\n                ...state,\r\n                NewActivity: payload\r\n            }\r\n        case CHANGE_PAGE:\r\n            return{\r\n                ...state,\r\n                page: payload\r\n            }\r\n        case ORDER_COUNTRIES:\r\n            const { orderOption } = payload;\r\n            let orderCountries\r\n\r\n            if (orderOption === 'name_asc') {\r\n                orderCountries = [...state.countries].sort((a, b) =>\r\n                a.name.localeCompare(b.name)\r\n                );\r\n                } else if (orderOption === 'name_desc') {\r\n                    orderCountries = [...state.countries].sort((a, b) =>\r\n                    b.name.localeCompare(a.name)\r\n                    );\r\n                } else if (orderOption === 'population_asc') {\r\n                    orderCountries = [...state.countries].sort((a, b) => \r\n                    a.population - b.population\r\n                    );\r\n                } else if (orderOption === 'population_desc') {\r\n                    orderCountries = [...state.countries].sort((a, b) => \r\n                    b.population - a.population\r\n                    );\r\n                } else {\r\n                    orderCountries = [...state.countries];\r\n                }\r\n            return {\r\n                ...state,\r\n                countries: orderCountries,\r\n            };\r\n        case FILTER_BY_CONTINENT:\r\n            const continent = payload\r\n            const allCountriesFiltered = state.countriesContinents;\r\n            const filterByContinent = continent === 'all' ? allCountriesFiltered : allCountriesFiltered.filter(country => country.region === continent)\r\n            return {\r\n                ...state, \r\n                countries: filterByContinent\r\n            };\r\n        case FILTER_BY_ACTIVITY:\r\n            const activity = payload\r\n            const countriesFiltered = state.countriesActivities;\r\n            const filterCountries = activity === 'all' ? countriesFiltered :  countriesFiltered.filter(country => country.Activities.length && country.Activities.some(act => act.id === Number(activity)))\r\n            return {\r\n                ...state, \r\n                countries: filterCountries\r\n            };\r\n            default:\r\n                return{\r\n                    ...state,\r\n                };\r\n    };\r\n};\r\n\r\nexport default reducer;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import axios from \"axios\";\nimport { GET_COUNTRIES, GET_COUNTRY_DETAIL, GET_COUNTRY_BY_NAME, GET_ACTIVITIES, ADD_ACTIVITY } from \"./actions-types\";\nconst SERVER_URL = \"http://localhost:3001\";\nexport const getCountries = () => {\n  return async dispatch => {\n    try {\n      const response = await axios.get(`${SERVER_URL}/countries`);\n      const data = response.data;\n      const countries = data.map(country => {\n        return {\n          id: country.id,\n          name: country.name,\n          flag: country.image,\n          continent: country.region\n        };\n      });\n      return dispatch({\n        type: GET_COUNTRIES,\n        payload: countries\n      });\n    } catch (error) {\n      console.log(error);\n    }\n    ;\n  };\n};\nexport const getCountryDetail = id => {\n  return async dispatch => {\n    try {\n      const response = await axios.get(`${SERVER_URL}/countries/${id}`);\n      const data = response.data;\n      const country = data.map(country => {\n        return {\n          id: country.id,\n          name: country.name,\n          flag: country.image,\n          region: country.region,\n          capital: country.capital,\n          continent: country.subregion,\n          area: country.area,\n          population: country.population,\n          activity: country.activity.map(activity => {\n            return {\n              id: activity.id,\n              name: activity.name,\n              difficult: activity.difficult,\n              duration: activity.duration,\n              season: activity.season\n            };\n          })\n        };\n      });\n      return dispatch({\n        type: GET_COUNTRY_DETAIL,\n        PAYLOAD: country\n      });\n    } catch (error) {\n      console.log(error);\n    }\n    ;\n  };\n};\nexport const getCountryByName = name => {\n  return async dispatch => {\n    // try {\n    const response = await axios.get(`${SERVER_URL}/countries/name?name=${name}`);\n    const data = response.data;\n    // const countryName = data.map(country => {\n    //     return{\n    //         id: country.id,\n    //         name: country.name,\n    //         flag: country.image,\n    //         continent: country.region,\n    //     }\n    // });\n    // console.log(data)\n    return dispatch({\n      type: GET_COUNTRY_BY_NAME,\n      PAYLOAD: data\n    });\n    // } catch (error) {\n    //     console.log(error);  \n    // };\n  };\n};\n\nexport const getActivities = () => {\n  return async dispatch => {\n    try {\n      const response = await axios.get(`${SERVER_URL}/activities`);\n      const data = response.data;\n      const activities = data.map(activity => {\n        return {\n          id: activity.id,\n          name: activity.name,\n          difficult: activity.difficult,\n          duration: activity.duration,\n          season: activity.season\n        };\n      });\n      return dispatch({\n        type: GET_ACTIVITIES,\n        PAYLOAD: activities\n      });\n    } catch (error) {\n      console.log(error);\n    }\n    ;\n  };\n};\nexport const addActivity = activityData => {\n  return async dispatch => {\n    try {\n      const response = await axios.post(`${SERVER_URL}/activities`, activityData);\n      const activity = response.data;\n      return dispatch({\n        type: ADD_ACTIVITY,\n        payload: activity\n      });\n    } catch (error) {\n      console.log(error);\n    }\n    ;\n  };\n};","map":{"version":3,"names":["axios","GET_COUNTRIES","GET_COUNTRY_DETAIL","GET_COUNTRY_BY_NAME","GET_ACTIVITIES","ADD_ACTIVITY","SERVER_URL","getCountries","dispatch","response","get","data","countries","map","country","id","name","flag","image","continent","region","type","payload","error","console","log","getCountryDetail","capital","subregion","area","population","activity","difficult","duration","season","PAYLOAD","getCountryByName","getActivities","activities","addActivity","activityData","post"],"sources":["C:/Users/valen/OneDrive/Escritorio/PI-Countries-main/client/src/Redux/actions.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { GET_COUNTRIES, GET_COUNTRY_DETAIL, GET_COUNTRY_BY_NAME, GET_ACTIVITIES, ADD_ACTIVITY  } from \"./actions-types\";\r\n\r\nconst SERVER_URL = \"http://localhost:3001\";\r\n\r\nexport const getCountries = () => {\r\n    return async (dispatch) => {\r\n        try {\r\n            const response = await axios.get(`${SERVER_URL}/countries`);\r\n            const data = response.data;\r\n            const countries = data.map(country => {\r\n                return{\r\n                    id: country.id,\r\n                    name: country.name,\r\n                    flag: country.image,\r\n                    continent: country.region,\r\n                }\r\n            });\r\n            return dispatch({ type: GET_COUNTRIES, payload: countries });\r\n        } catch (error) {\r\n            console.log(error);\r\n        };\r\n    };\r\n};\r\n\r\nexport const getCountryDetail = (id) => {\r\n    return async (dispatch) => {\r\n        try {\r\n            const response = await axios.get(`${SERVER_URL}/countries/${id}`)\r\n            const data = response.data;\r\n            const country = data.map(country => {\r\n                return{\r\n                    id: country.id,\r\n                    name: country.name,\r\n                    flag: country.image,\r\n                    region: country.region,\r\n                    capital: country.capital,\r\n                    continent: country.subregion,\r\n                    area: country.area,\r\n                    population: country.population,\r\n                    activity: country.activity.map(activity => {\r\n                        return{\r\n                            id: activity.id,\r\n                            name: activity.name,\r\n                            difficult: activity.difficult,\r\n                            duration: activity.duration,\r\n                            season: activity.season,\r\n                        }\r\n                    }),\r\n                }\r\n            });\r\n            return dispatch({ type: GET_COUNTRY_DETAIL, PAYLOAD: country });\r\n        } catch (error) {\r\n            console.log(error);    \r\n        };\r\n    };\r\n};\r\n\r\nexport const getCountryByName = (name) => {\r\n    return async (dispatch) => {\r\n        // try {\r\n            const response = await axios.get(`${SERVER_URL}/countries/name?name=${name}`);\r\n            const data = response.data;\r\n            // const countryName = data.map(country => {\r\n            //     return{\r\n            //         id: country.id,\r\n            //         name: country.name,\r\n            //         flag: country.image,\r\n            //         continent: country.region,\r\n            //     }\r\n            // });\r\n            // console.log(data)\r\n            return dispatch({ type: GET_COUNTRY_BY_NAME, PAYLOAD: data });\r\n            // } catch (error) {\r\n                //     console.log(error);  \r\n                // };\r\n            };\r\n};\r\n\r\nexport const getActivities = () => {\r\n    return async (dispatch) => {\r\n        try {\r\n            const response = await axios.get(`${SERVER_URL}/activities`);\r\n            const data = response.data;\r\n            const activities = data.map(activity => {\r\n                return{\r\n                    id: activity.id,\r\n                    name: activity.name,\r\n                    difficult: activity.difficult,\r\n                    duration: activity.duration,\r\n                    season: activity.season,\r\n                };\r\n            });\r\n            return dispatch({ type: GET_ACTIVITIES, PAYLOAD: activities });\r\n        } catch (error) {\r\n            console.log(error);\r\n        };\r\n    };\r\n};\r\n\r\nexport const addActivity = (activityData) => {\r\n    return async (dispatch) => {\r\n        try {\r\n            const response = await axios.post(`${SERVER_URL}/activities`, activityData);\r\n            const activity = response.data;\r\n            return dispatch({ type: ADD_ACTIVITY, payload: activity });\r\n        } catch (error) {\r\n            console.log(error);\r\n        };\r\n    };\r\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}